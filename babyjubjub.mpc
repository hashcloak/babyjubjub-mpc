import sys
sys.path.append("../MP-SPDZ")
from Compiler.types import sint

program.use_edabit(True)
program.set_bit_length(32)

# Constants
a_pub = sint(168700)
d_pub = sint(168696)
q_pub = sint(21888242871839275222246405745257275088548364400416034343698204186575808495617)

class BabyJubJubPoint:
    def __init__(self, x1, y1):
        self.x = sint(x1)
        self.y = sint(y1)

    def __add__(self, Q):
        # TODO : Short circuiting for when either point is 0
        x3 = (self.x * Q.y + self.y * Q.x).int_div(sint(1) + (d_pub * self.x * self.y * Q.x * Q.y))
        y3 = (self.y*Q.y - a_pub*self.x*Q.x).int_div(1 - (d_pub *self.x * self.y * Q.x * Q.y))
        return BabyJubJubPoint(x3, y3)

    def double(self):
        # TODO : Short circuiting for when the point is 0
        return self + self

    def ec_if_else(self, Q, b):
        x_r = b * (self.x - Q.x) + Q.x
        y_r = b * (self.y - Q.y) + Q.y
        return BabyJubJubPoint(x_r, y_r)

    def __mul__(self, s):
        pass

a = 168700
d = 168696
q = 21888242871839275222246405745257275088548364400416034343698204186575808495617

# Check point (0, 0)
x1 = sint(0)
y1 = sint(0)
p1 = BabyJubJubPoint(x1, y1)

x2 = sint(0)
y2 = sint(0)
p2 = BabyJubJubPoint(x2, y2)

p3 = p1 + p2

expected_x3 = (x1*y2+y1*x2).int_div(1+d*x1*x2*y1*y2)
expected_y3 = (y1*y2-a*x1*x2).int_div(1-d*x1*x2*y1*y2)

print_ln('expected (%s, %s), got (%s, %s)', expected_x3.reveal(), expected_y3.reveal(), p3.x.reveal(), p3.y.reveal())

# Check non-zero point
x1 = sint(17777552123799933955779906779655732241715742912184938656739573121738514868268)
y1 = sint(2626589144620713026669568689430873010625803728049924121243784502389097019475)
p1 = BabyJubJubPoint(x1, y1)

x2 = sint(0)
y2 = sint(1)
p2 = BabyJubJubPoint(x2, y2)

p3 = p1 + p2

expected_x3 = (x1*y2+y1*x2).int_div(1+d*x1*x2*y1*y2)
expected_y3 = (y1*y2-a*x1*x2).int_div(1-d*x1*x2*y1*y2)

print_ln('expected (%s, %s), got (%s, %s)', expected_x3.reveal(), expected_y3.reveal(), p3.x.reveal(), p3.y.reveal())

# Check doubling
p3 = p1.double()

expected_x3 = (x1*y1+y1*x1).int_div(1+d*x1*x1*y1*y1)
expected_y3 = (y1*y1-a*x1*x1).int_div(1-d*x1*x1*y1*y1)

print_ln('expected (%s, %s), got (%s, %s)', expected_x3.reveal(), expected_y3.reveal(), p3.x.reveal(), p3.y.reveal())

# Check conditional
p_r0 = p3.ec_if_else(p2, 1)
print_ln('expected (%s, %s), got (%s, %s)', p3.x.reveal(), p3.y.reveal(), p_r0.x.reveal(), p_r0.y.reveal())

p_r1 = p3.ec_if_else(p2, 0)
print_ln('expected (%s, %s), got (%s, %s)', p2.x.reveal(), p2.y.reveal(), p_r1.x.reveal(), p_r1.y.reveal())